/* The following code was generated by JFlex 1.6.1 */

package AnalizadorLexico;
import java_cup.runtime.Symbol;
import AnalizadorSintatico.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Leandro/Desktop/Leandro/Faculdade/COMP/TrabalhoCompiladoresV3/src/AnalizadorLexico/Lexema.flex</tt>
 */
public class ScannerJLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\74\1\101\1\101\1\74\22\0\1\73\1\72\1\76"+
    "\1\70\1\72\1\61\1\72\1\0\1\45\1\46\1\57\1\55\1\66"+
    "\1\56\1\54\1\60\12\77\1\75\1\67\1\62\1\53\1\63\1\72"+
    "\1\72\1\27\1\43\1\40\1\3\1\7\1\34\1\71\1\16\1\17"+
    "\1\71\1\44\1\20\1\71\1\10\1\4\1\26\1\71\1\25\1\36"+
    "\1\30\1\32\1\71\1\15\3\71\1\51\1\0\1\52\1\65\1\71"+
    "\1\0\1\23\1\41\1\37\1\1\1\5\1\33\1\71\1\12\1\13"+
    "\1\71\1\42\1\14\1\71\1\6\1\2\1\22\1\71\1\21\1\35"+
    "\1\24\1\31\1\71\1\11\3\71\1\47\1\0\1\50\1\72\6\0"+
    "\1\101\34\0\1\72\1\72\3\0\1\72\1\72\3\0\1\72\u1f7b\0"+
    "\1\101\1\101\u0212\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uddd3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\33\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\26\1\30\1\31\1\32\1\33\10\2\1\34"+
    "\1\35\25\2\1\36\1\37\1\0\1\40\1\41\1\42"+
    "\2\0\1\43\1\2\1\44\1\2\1\45\7\2\1\46"+
    "\10\2\1\47\6\2\1\50\1\0\1\32\1\30\2\51"+
    "\6\2\1\52\1\53\12\2\1\26\2\2\1\54\1\55"+
    "\4\2\1\56\1\57\2\2\1\60\1\61\1\62\1\63"+
    "\4\2\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\u077a\0\u07bc\0\102\0\u07fe\0\102"+
    "\0\102\0\102\0\u0840\0\u0882\0\u08c4\0\102\0\102\0\102"+
    "\0\102\0\u0906\0\102\0\u0948\0\u098a\0\u02d6\0\u09cc\0\u02d6"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u02d6\0\u02d6\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\102"+
    "\0\u1188\0\u11ca\0\102\0\102\0\102\0\u120c\0\u124e\0\u02d6"+
    "\0\u1290\0\u02d6\0\u12d2\0\u02d6\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u02d6\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u02d6\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\102\0\u187e\0\102\0\u124e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u02d6"+
    "\0\u02d6\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\102\0\u1d64\0\u1da6\0\u02d6\0\u02d6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u02d6\0\u02d6\0\u1ef0\0\u1f32"+
    "\0\u02d6\0\u02d6\0\u02d6\0\u02d6\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u02d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\21\1\22\1\14\1\23\1\24\1\25\1\14\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\4\14\1\34\1\14"+
    "\1\35\1\14\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\14\1\2"+
    "\2\62\1\63\1\64\1\65\1\62\104\0\1\14\1\66"+
    "\42\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\20\14\1\70\23\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\1\14\1\66"+
    "\1\14\1\66\40\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\20\14\1\70\3\14\1\70"+
    "\17\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\5\14\1\71\5\14\1\72\30\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\12\14\1\73\31\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\5\14\1\71\1\14\1\74"+
    "\3\14\1\72\3\14\1\75\24\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\3\14\1\76"+
    "\6\14\1\73\3\14\1\77\25\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\11\14\1\100"+
    "\32\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\44\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\5\14\1\101\24\14\1\102"+
    "\11\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\1\14\1\103\42\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\11\14\1\100"+
    "\3\14\1\104\26\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\5\14\1\101\1\14\1\101"+
    "\22\14\2\102\10\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\1\14\1\103\1\14\1\105"+
    "\40\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\4\14\1\106\37\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\5\14\1\107"+
    "\36\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\11\14\1\110\6\14\1\111\23\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\4\14\1\106\1\14\1\112\35\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\5\14\1\107"+
    "\1\14\1\113\34\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\11\14\1\110\3\14\1\114"+
    "\2\14\1\111\3\14\1\115\17\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\5\14\1\116"+
    "\36\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\5\14\1\116\1\14\1\117\34\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\1\14\1\120\20\14\1\121\5\14\1\122\13\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\1\14\1\120\1\14\1\123\16\14\1\121\3\14\1\124"+
    "\1\14\1\122\1\125\12\14\20\0\1\67\2\0\1\67"+
    "\1\14\1\67\4\0\1\67\3\0\20\14\1\126\23\14"+
    "\20\0\1\67\2\0\1\67\1\14\1\67\4\0\1\67"+
    "\3\0\20\14\1\126\3\14\1\127\17\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\55\0\1\130"+
    "\102\0\1\131\103\0\1\132\76\0\1\133\101\0\1\134"+
    "\101\0\1\135\121\0\2\62\1\0\1\62\1\0\1\62"+
    "\2\0\44\136\24\0\1\136\1\0\2\62\1\0\1\62"+
    "\1\136\1\62\2\0\44\67\7\0\1\137\10\0\1\67"+
    "\2\0\3\67\4\0\1\65\3\0\44\67\20\0\1\67"+
    "\2\0\3\67\4\0\1\67\3\0\1\140\43\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\34\14\1\141\7\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\13\14\1\142\30\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\2\14\1\140\41\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\35\14\1\143\6\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\27\14\1\144\14\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\17\14\1\145\24\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\12\14\1\146\31\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\36\14\1\147\5\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\16\14\1\150\25\14\20\0\1\67\2\0\1\67\1\14"+
    "\1\67\4\0\1\67\3\0\37\14\1\151\4\14\20\0"+
    "\1\67\2\0\1\67\1\14\1\67\4\0\1\67\3\0"+
    "\21\14\1\152\1\14\1\153\20\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\1\154\43\14"+
    "\20\0\1\67\2\0\1\67\1\14\1\67\4\0\1\67"+
    "\3\0\4\14\1\155\37\14\20\0\1\67\2\0\1\67"+
    "\1\14\1\67\4\0\1\67\3\0\30\14\1\156\13\14"+
    "\20\0\1\67\2\0\1\67\1\14\1\67\4\0\1\67"+
    "\3\0\25\14\1\157\1\14\1\160\14\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\2\14"+
    "\1\154\41\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\6\14\1\161\35\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\31\14"+
    "\1\162\12\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\23\14\1\163\20\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\27\14"+
    "\1\164\14\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\20\14\1\165\23\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\13\14"+
    "\1\166\30\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\5\14\1\167\36\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\24\14"+
    "\1\165\17\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\17\14\1\170\24\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\7\14"+
    "\1\171\34\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\4\14\1\172\37\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\6\14"+
    "\1\173\35\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\56\0\1\174\26\0\44\175\24\0\1\175"+
    "\5\0\1\175\3\0\44\136\20\0\1\136\2\0\3\136"+
    "\3\0\1\176\1\136\101\0\1\177\3\0\4\14\1\200"+
    "\37\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\6\14\1\201\35\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\17\14\1\142"+
    "\24\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\13\14\1\202\30\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\22\14\1\203"+
    "\21\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\17\14\1\204\24\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\26\14\1\205"+
    "\15\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\4\14\1\206\37\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\30\14\1\207"+
    "\13\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\5\14\1\210\36\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\4\14\1\211"+
    "\37\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\6\14\1\212\35\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\31\14\1\213"+
    "\12\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\7\14\1\210\34\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\6\14\1\211"+
    "\35\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\12\14\1\214\31\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\16\14\1\215"+
    "\25\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\34\14\1\216\7\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\36\14\1\217"+
    "\5\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\35\14\1\220\6\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\37\14\1\221"+
    "\4\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\22\14\1\222\21\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\26\14\1\223"+
    "\15\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\44\175\20\0\1\175\2\0\4\175\1\224"+
    "\2\0\1\175\3\0\12\14\1\225\31\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\16\14"+
    "\1\226\25\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\4\14\1\227\37\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\13\14"+
    "\1\230\30\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\6\14\1\227\35\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\17\14"+
    "\1\230\24\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\22\14\1\231\21\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\20\14"+
    "\1\232\23\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\26\14\1\233\15\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\24\14"+
    "\1\234\17\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\13\14\1\235\30\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\17\14"+
    "\1\235\24\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\4\14\1\236\37\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\23\14"+
    "\1\237\20\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\6\14\1\236\35\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\27\14"+
    "\1\240\14\14\20\0\1\67\2\0\1\67\1\14\1\67"+
    "\4\0\1\67\3\0\41\14\1\241\2\14\20\0\1\67"+
    "\2\0\1\67\1\14\1\67\4\0\1\67\3\0\43\14"+
    "\1\241\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\32\14\1\242\11\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\33\14\1\242"+
    "\10\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\23\14\1\243\20\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\5\14\1\244"+
    "\36\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\27\14\1\243\14\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\7\14\1\244"+
    "\34\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\12\14\1\245\31\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\16\14\1\246"+
    "\25\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\1\14\1\247\42\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\3\14\1\250"+
    "\40\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\3\0\5\14\1\251\36\14\20\0\1\67\2\0"+
    "\1\67\1\14\1\67\4\0\1\67\3\0\7\14\1\251"+
    "\34\14\20\0\1\67\2\0\1\67\1\14\1\67\4\0"+
    "\1\67\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8316];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\6\11\2\1\1\11\1\1\3\11"+
    "\3\1\4\11\1\1\1\11\44\1\1\11\1\1\1\0"+
    "\3\11\2\0\34\1\1\11\1\0\1\11\25\1\1\11"+
    "\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerJLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol( sym.EOF , new String ("Fim de arquivo, elemento faltando"));
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character: "+yytext()+" at line "+(yyline+1)+", column "+(yycolumn+1) + " ERRO LEXICO"  );
            }
          case 53: break;
          case 2: 
            { lexema=yytext(); return new Symbol(sym.NAME, yychar, yyline, yytext());
            }
          case 54: break;
          case 3: 
            { lexema=yytext(); return new Symbol(sym.AP, yychar, yyline, yytext());
            }
          case 55: break;
          case 4: 
            { lexema=yytext(); return new Symbol(sym.FP, yychar, yyline, yytext());
            }
          case 56: break;
          case 5: 
            { lexema=yytext(); return new Symbol(sym.AX, yychar, yyline, yytext());
            }
          case 57: break;
          case 6: 
            { lexema=yytext(); return new Symbol(sym.FX, yychar, yyline, yytext());
            }
          case 58: break;
          case 7: 
            { lexema=yytext(); return new Symbol(sym.AC, yychar, yyline, yytext());
            }
          case 59: break;
          case 8: 
            { lexema=yytext(); return new Symbol(sym.FC, yychar, yyline, yytext());
            }
          case 60: break;
          case 9: 
            { lexema=yytext(); return new Symbol(sym.IGUAL, yychar, yyline, yytext());
            }
          case 61: break;
          case 10: 
            { lexema=yytext(); return new Symbol(sym.UMPT, yychar, yyline, yytext());
            }
          case 62: break;
          case 11: 
            { lexema=yytext(); return new Symbol(sym.SUM, yychar, yyline, yytext());
            }
          case 63: break;
          case 12: 
            { lexema=yytext(); return new Symbol(sym.MEN, yychar, yyline, yytext());
            }
          case 64: break;
          case 13: 
            { lexema=yytext(); return new Symbol(sym.MULT, yychar, yyline, yytext());
            }
          case 65: break;
          case 14: 
            { lexema=yytext(); return new Symbol(sym.DIV, yychar, yyline, yytext());
            }
          case 66: break;
          case 15: 
            { lexema=yytext(); return new Symbol(sym.PERCENT, yychar, yyline, yytext());
            }
          case 67: break;
          case 16: 
            { lexema=yytext(); return new Symbol(sym.MENOR, yychar, yyline, yytext());
            }
          case 68: break;
          case 17: 
            { lexema=yytext(); return new Symbol(sym.MAIOR, yychar, yyline, yytext());
            }
          case 69: break;
          case 18: 
            { lexema=yytext(); return new Symbol(sym.UNIAO, yychar, yyline, yytext());
            }
          case 70: break;
          case 19: 
            { lexema=yytext(); return new Symbol(sym.VI, yychar, yyline, yytext());
            }
          case 71: break;
          case 20: 
            { lexema=yytext(); return new Symbol(sym.PV, yychar, yyline, yytext());
            }
          case 72: break;
          case 21: 
            { lexema=yytext(); return new Symbol(sym.TRALHA, yychar, yyline, yytext());
            }
          case 73: break;
          case 22: 
            { /*Ignore*/
            }
          case 74: break;
          case 23: 
            { lexema=yytext(); return new Symbol(sym.DP, yychar, yyline, yytext());
            }
          case 75: break;
          case 24: 
            { lexema=yytext(); return new Symbol(sym.NUMBER, yychar, yyline, yytext());
            }
          case 76: break;
          case 25: 
            { lexema=yytext(); return new Symbol(sym.DO, yychar, yyline, yytext());
            }
          case 77: break;
          case 26: 
            { lexema=yytext(); return new Symbol(sym.STRING, yychar, yyline, yytext());
            }
          case 78: break;
          case 27: 
            { lexema=yytext(); return new Symbol(sym.OR, yychar, yyline, yytext());
            }
          case 79: break;
          case 28: 
            { lexema=yytext(); return new Symbol(sym.IN, yychar, yyline, yytext());
            }
          case 80: break;
          case 29: 
            { lexema=yytext(); return new Symbol(sym.IF, yychar, yyline, yytext());
            }
          case 81: break;
          case 30: 
            { lexema=yytext(); return new Symbol(sym.IGUALIGUAL, yychar, yyline, yytext());
            }
          case 82: break;
          case 31: 
            { lexema=yytext(); return new Symbol(sym.DPH, yychar, yyline, yytext());
            }
          case 83: break;
          case 32: 
            { lexema=yytext(); return new Symbol(sym.MENORIGUAL, yychar, yyline, yytext());
            }
          case 84: break;
          case 33: 
            { lexema=yytext(); return new Symbol(sym.MAIORIGUAL, yychar, yyline, yytext());
            }
          case 85: break;
          case 34: 
            { lexema=yytext(); return new Symbol(sym.APROXIGUAL, yychar, yyline, yytext());
            }
          case 86: break;
          case 35: 
            { lexema=yytext(); return new Symbol(sym.END, yychar, yyline, yytext());
            }
          case 87: break;
          case 36: 
            { lexema=yytext(); return new Symbol(sym.NIL, yychar, yyline, yytext());
            }
          case 88: break;
          case 37: 
            { lexema=yytext(); return new Symbol(sym.NOT, yychar, yyline, yytext());
            }
          case 89: break;
          case 38: 
            { lexema=yytext(); return new Symbol(sym.AND, yychar, yyline, yytext());
            }
          case 90: break;
          case 39: 
            { lexema=yytext(); return new Symbol(sym.FOR, yychar, yyline, yytext());
            }
          case 91: break;
          case 40: 
            { lexema=yytext(); return new Symbol(sym.TRESPT, yychar, yyline, yytext());
            }
          case 92: break;
          case 41: 
            { lexema=yytext(); return new Symbol(sym.ELSE, yychar, yyline, yytext());
            }
          case 93: break;
          case 42: 
            { lexema=yytext(); return new Symbol(sym.THEN, yychar, yyline, yytext());
            }
          case 94: break;
          case 43: 
            { lexema=yytext(); return new Symbol(sym.TRUE, yychar, yyline, yytext());
            }
          case 95: break;
          case 44: 
            { lexema=yytext(); return new Symbol(sym.WHILE, yychar, yyline, yytext());
            }
          case 96: break;
          case 45: 
            { lexema=yytext(); return new Symbol(sym.LOCAL, yychar, yyline, yytext());
            }
          case 97: break;
          case 46: 
            { lexema=yytext(); return new Symbol(sym.UNTIL, yychar, yyline, yytext());
            }
          case 98: break;
          case 47: 
            { lexema=yytext(); return new Symbol(sym.FALSE, yychar, yyline, yytext());
            }
          case 99: break;
          case 48: 
            { lexema=yytext(); return new Symbol(sym.BREAK, yychar, yyline, yytext());
            }
          case 100: break;
          case 49: 
            { lexema=yytext(); return new Symbol(sym.ELSEIF, yychar, yyline, yytext());
            }
          case 101: break;
          case 50: 
            { lexema=yytext(); return new Symbol(sym.REPEAT, yychar, yyline, yytext());
            }
          case 102: break;
          case 51: 
            { lexema=yytext(); return new Symbol(sym.RETURN, yychar, yyline, yytext());
            }
          case 103: break;
          case 52: 
            { lexema=yytext(); return new Symbol(sym.FUNCTION, yychar, yyline, yytext());
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
