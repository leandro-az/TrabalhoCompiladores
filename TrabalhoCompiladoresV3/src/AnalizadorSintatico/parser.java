
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 21 18:03:25 BRST 2016
//----------------------------------------------------

package AnalizadorSintatico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import AnalizadorLexico.ScannerJLexer.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 21 18:03:25 BRST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\014\003\000\002\014\004\000\002\014\004" +
    "\000\002\014\005\000\002\015\003\000\002\015\004\000" +
    "\002\006\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\007\000\002\004\010\000\002\004\012\000\002\004\011" +
    "\000\002\004\013\000\002\004\015\000\002\004\011\000" +
    "\002\004\005\000\002\004\006\000\002\004\004\000\002" +
    "\004\005\000\002\035\006\000\002\035\007\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\021\003" +
    "\000\002\021\004\000\002\021\006\000\002\021\005\000" +
    "\002\030\004\000\002\030\005\000\002\007\003\000\002" +
    "\007\005\000\002\025\003\000\002\025\006\000\002\025" +
    "\005\000\002\013\003\000\002\013\005\000\002\010\003" +
    "\000\002\010\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\004\000\002\012\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\011\004\000" +
    "\002\011\006\000\002\011\004\000\002\011\006\000\002" +
    "\017\003\000\002\017\004\000\002\020\005\000\002\020" +
    "\006\000\002\032\004\000\002\032\003\000\002\032\003" +
    "\000\002\032\005\000\002\026\004\000\002\024\006\000" +
    "\002\024\007\000\002\033\003\000\002\033\005\000\002" +
    "\033\003\000\002\031\004\000\002\031\005\000\002\034" +
    "\003\000\002\034\004\000\002\034\005\000\002\034\004" +
    "\000\002\016\005\000\002\016\004\000\002\036\007\000" +
    "\002\036\005\000\002\036\003\000\002\003\003\000\002" +
    "\003\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\024\006\017\010\005\011\004\013\013\036" +
    "\006\043\011\044\016\052\022\053\020\001\002\000\024" +
    "\006\017\010\005\011\004\013\013\036\006\043\011\044" +
    "\016\052\022\053\020\001\002\000\034\004\037\020\036" +
    "\034\042\035\026\037\034\040\044\041\033\044\031\051" +
    "\040\052\022\053\020\055\027\062\035\001\002\000\004" +
    "\052\251\001\002\000\050\002\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\036\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\052\ufff6\053\ufff6\057" +
    "\uffc7\063\uffc7\064\ufff6\001\002\000\044\002\ufffe\006\017" +
    "\007\ufffe\010\005\011\004\012\ufffe\013\013\015\ufffe\016" +
    "\ufffe\036\006\043\011\044\016\045\ufffe\046\ufffe\052\022" +
    "\053\020\064\245\001\002\000\006\044\241\052\121\001" +
    "\002\000\020\002\000\007\000\012\000\015\000\016\000" +
    "\045\232\046\234\001\002\000\034\004\037\020\036\034" +
    "\042\035\026\037\034\040\044\041\033\044\031\051\040" +
    "\052\022\053\020\055\027\062\035\001\002\000\004\061" +
    "\207\001\002\000\004\002\206\001\002\000\004\052\174" +
    "\001\002\000\024\006\017\010\005\011\004\013\013\036" +
    "\006\043\011\044\016\052\022\053\020\001\002\000\034" +
    "\004\037\020\036\034\042\035\026\037\034\040\044\041" +
    "\033\044\031\051\040\052\022\053\020\055\027\062\035" +
    "\001\002\000\022\004\051\053\055\055\027\057\uffc8\061" +
    "\uffdc\063\uffc8\065\163\066\050\001\002\000\130\002\uffda" +
    "\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\036\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\001\002\000\006\057\025\063" +
    "\024\001\002\000\004\052\162\001\002\000\034\004\037" +
    "\020\036\034\042\035\026\037\034\040\044\041\033\044" +
    "\031\051\040\052\022\053\020\055\027\062\035\001\002" +
    "\000\034\004\uff95\020\uff95\034\uff95\035\uff95\037\uff95\040" +
    "\uff95\041\uff95\044\uff95\051\uff95\052\uff95\053\uff95\055\uff95" +
    "\062\uff95\001\002\000\040\004\037\020\036\034\042\035" +
    "\026\037\034\040\044\041\033\044\031\051\040\052\136" +
    "\053\020\055\027\056\142\057\140\062\035\001\002\000" +
    "\114\002\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\036\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\056\uffcd\060\uffcd\064\uffcd\065\uffcd\001\002\000" +
    "\004\053\114\001\002\000\042\017\065\020\073\021\072" +
    "\022\076\023\071\024\100\025\064\026\070\027\063\030" +
    "\066\031\074\032\077\033\067\047\062\050\102\060\113" +
    "\001\002\000\114\002\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\056\uffd1\060\uffd1\064\uffd1\065\uffd1" +
    "\001\002\000\114\002\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\036\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\056\uffd3\060\uffd3\064\uffd3\065\uffd3" +
    "\001\002\000\114\002\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\036\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\052" +
    "\uffce\053\uffce\054\uffce\056\uffce\060\uffce\064\uffce\065\uffce" +
    "\001\002\000\034\004\uff96\020\uff96\034\uff96\035\uff96\037" +
    "\uff96\040\uff96\041\uff96\044\uff96\051\uff96\052\uff96\053\uff96" +
    "\055\uff96\062\uff96\001\002\000\114\002\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\036\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf\060\uffcf" +
    "\064\uffcf\065\uffcf\001\002\000\114\002\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\036\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\060\uffd0" +
    "\064\uffd0\065\uffd0\001\002\000\120\002\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\036\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\063\uffc7\064\uffc7\065\uffc7\001\002\000\034\004" +
    "\uff97\020\uff97\034\uff97\035\uff97\037\uff97\040\uff97\041\uff97" +
    "\044\uff97\051\uff97\052\uff97\053\uff97\055\uff97\062\uff97\001" +
    "\002\000\034\004\037\020\036\034\042\035\026\037\034" +
    "\040\044\041\033\044\031\051\040\052\022\053\020\055" +
    "\027\062\035\001\002\000\114\002\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\036\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\052\uffd2\053\uffd2\054\uffd2\056\uffd2\060\uffd2\064" +
    "\uffd2\065\uffd2\001\002\000\114\002\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\036\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\052\uffcb\053\uffcb\054\uffcb\056\uffcb\060\uffcb\064" +
    "\uffcb\065\uffcb\001\002\000\120\002\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\036\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\052\uffcc\053\uffcc\054\uffcc\056\uffcc\057\025\060" +
    "\uffcc\063\024\064\uffcc\065\uffcc\001\002\000\126\002\uffc8" +
    "\004\051\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053\055\054" +
    "\uffc8\055\027\056\uffc8\057\uffc8\060\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\050\001\002\000\004\052\107\001\002\000" +
    "\126\002\uffbb\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\120\002\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\036\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002" +
    "\000\124\002\uffc1\004\051\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\036\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052" +
    "\uffc1\053\055\054\uffc1\055\027\056\uffc1\057\uffc1\060\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\001\002\000\120\002\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000" +
    "\036\004\037\020\036\034\042\035\026\037\034\040\044" +
    "\041\033\044\031\051\040\052\022\053\020\054\057\055" +
    "\027\062\035\001\002\000\126\002\uffbc\004\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\036\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\001\002\000\126\002\uffbd\004\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\036\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000" +
    "\004\054\105\001\002\000\106\002\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017" +
    "\065\020\073\021\072\022\076\023\071\024\100\025\064" +
    "\026\070\027\063\030\066\031\074\032\077\033\067\036" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\062\050\102" +
    "\052\uffd5\053\uffd5\054\uffd5\064\uffd5\065\101\001\002\000" +
    "\034\004\uff99\020\uff99\034\uff99\035\uff99\037\uff99\040\uff99" +
    "\041\uff99\044\uff99\051\uff99\052\uff99\053\uff99\055\uff99\062" +
    "\uff99\001\002\000\034\004\uff9e\020\uff9e\034\uff9e\035\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\044\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\055\uff9e\062\uff9e\001\002\000\034\004\uffa2\020\uffa2" +
    "\034\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2\044\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\055\uffa2\062\uffa2\001\002\000\034" +
    "\004\uffa6\020\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\044\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\062\uffa6" +
    "\001\002\000\034\004\uff9d\020\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\044\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\055\uff9d\062\uff9d\001\002\000\034\004\uff9a\020\uff9a\034" +
    "\uff9a\035\uff9a\037\uff9a\040\uff9a\041\uff9a\044\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\055\uff9a\062\uff9a\001\002\000\034\004" +
    "\uff9f\020\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\044\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\062\uff9f\001" +
    "\002\000\034\004\uffa1\020\uffa1\034\uffa1\035\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\044\uffa1\051\uffa1\052\uffa1\053\uffa1\055" +
    "\uffa1\062\uffa1\001\002\000\034\004\uffa4\020\uffa4\034\uffa4" +
    "\035\uffa4\037\uffa4\040\uffa4\041\uffa4\044\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\062\uffa4\001\002\000\034\004\uffa5" +
    "\020\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\044" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\062\uffa5\001\002" +
    "\000\034\004\uff9c\020\uff9c\034\uff9c\035\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\044\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c" +
    "\062\uff9c\001\002\000\034\004\037\020\036\034\042\035" +
    "\026\037\034\040\044\041\033\044\031\051\040\052\022" +
    "\053\020\055\027\062\035\001\002\000\034\004\uffa3\020" +
    "\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\044\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\055\uffa3\062\uffa3\001\002\000" +
    "\034\004\uff9b\020\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\044\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\062" +
    "\uff9b\001\002\000\034\004\uffa0\020\uffa0\034\uffa0\035\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\044\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\055\uffa0\062\uffa0\001\002\000\034\004\037\020\036" +
    "\034\042\035\026\037\034\040\044\041\033\044\031\051" +
    "\040\052\022\053\020\055\027\062\035\001\002\000\034" +
    "\004\uff98\020\uff98\034\uff98\035\uff98\037\uff98\040\uff98\041" +
    "\uff98\044\uff98\051\uff98\052\uff98\053\uff98\055\uff98\062\uff98" +
    "\001\002\000\046\002\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\036\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\052\uffd4\053\uffd4\054\uffd4\064" +
    "\uffd4\001\002\000\114\002\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\065\020\073\021\072\022\076\023\071\024\100\025\064" +
    "\026\070\027\063\030\066\031\074\032\077\033\067\036" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\062\050\102" +
    "\052\uffc9\053\uffc9\054\uffc9\056\uffc9\060\uffc9\064\uffc9\065" +
    "\uffc9\001\002\000\126\002\uffba\004\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\036\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001\002" +
    "\000\120\002\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\001\002\000\010\004\051\053\055\055\027\001" +
    "\002\000\122\002\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\050\001\002\000\120\002\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\036\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000\114" +
    "\002\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\065\020\073\021\072" +
    "\022\076\023\071\024\100\025\064\026\070\027\063\030" +
    "\066\031\074\032\077\033\067\036\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\062\050\102\052\uffca\053\uffca\054" +
    "\uffca\056\uffca\060\uffca\064\uffca\065\uffca\001\002\000\130" +
    "\002\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002\000\010\052" +
    "\121\054\120\062\116\001\002\000\114\002\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\036\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\052\uffb9\053\uffb9\054\uffb9\056\uffb9\060" +
    "\uffb9\064\uffb9\065\uffb9\001\002\000\004\054\uffb4\001\002" +
    "\000\006\054\uffb6\065\133\001\002\000\024\006\017\010" +
    "\005\011\004\013\013\036\006\043\011\044\016\052\022" +
    "\053\020\001\002\000\076\002\uffd7\004\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\062\uffd7\064\uffd7\065" +
    "\127\001\002\000\004\054\123\001\002\000\024\006\017" +
    "\010\005\011\004\013\013\036\006\043\011\044\016\052" +
    "\022\053\020\001\002\000\004\007\126\001\002\000\012" +
    "\007\ufff8\012\ufff8\015\ufff8\016\ufff8\001\002\000\114\002" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\036\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\056\uffb7\060\uffb7\064\uffb7\065\uffb7\001\002\000\004\052" +
    "\121\001\002\000\076\002\uffd6\004\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\062\uffd6\064\uffd6\065\uffd6" +
    "\001\002\000\004\007\132\001\002\000\114\002\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\036\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8\056\uffb8" +
    "\060\uffb8\064\uffb8\065\uffb8\001\002\000\004\062\134\001" +
    "\002\000\004\054\uffb5\001\002\000\010\056\uffb1\064\154" +
    "\065\155\001\002\000\064\004\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\047\uffda\050\uffda\053" +
    "\uffda\055\uffda\056\uffda\057\uffda\061\150\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\001\002\000\046\017\065\020\073\021" +
    "\072\022\076\023\071\024\100\025\064\026\070\027\063" +
    "\030\066\031\074\032\077\033\067\047\062\050\102\056" +
    "\uffa9\064\uffa9\065\uffa9\001\002\000\034\004\037\020\036" +
    "\034\042\035\026\037\034\040\044\041\033\044\031\051" +
    "\040\052\022\053\020\055\027\062\035\001\002\000\004" +
    "\056\143\001\002\000\126\002\uffb3\004\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\036\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001" +
    "\002\000\126\002\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\036" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\042" +
    "\017\065\020\073\021\072\022\076\023\071\024\100\025" +
    "\064\026\070\027\063\030\066\031\074\032\077\033\067" +
    "\047\062\050\102\060\145\001\002\000\004\061\146\001" +
    "\002\000\034\004\037\020\036\034\042\035\026\037\034" +
    "\040\044\041\033\044\031\051\040\052\022\053\020\055" +
    "\027\062\035\001\002\000\046\017\065\020\073\021\072" +
    "\022\076\023\071\024\100\025\064\026\070\027\063\030" +
    "\066\031\074\032\077\033\067\047\062\050\102\056\uffab" +
    "\064\uffab\065\uffab\001\002\000\034\004\037\020\036\034" +
    "\042\035\026\037\034\040\044\041\033\044\031\051\040" +
    "\052\022\053\020\055\027\062\035\001\002\000\046\017" +
    "\065\020\073\021\072\022\076\023\071\024\100\025\064" +
    "\026\070\027\063\030\066\031\074\032\077\033\067\047" +
    "\062\050\102\056\uffaa\064\uffaa\065\uffaa\001\002\000\010" +
    "\056\uffb0\064\154\065\155\001\002\000\040\004\037\020" +
    "\036\034\042\035\026\037\034\040\044\041\033\044\031" +
    "\051\040\052\136\053\020\055\027\056\uffae\057\140\062" +
    "\035\001\002\000\040\004\uffa7\020\uffa7\034\uffa7\035\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\044\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\062\uffa7\001\002\000\040" +
    "\004\uffa8\020\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\044\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\062\uffa8\001\002\000\010\056\uffac\064\154\065" +
    "\155\001\002\000\010\056\uffad\064\uffad\065\uffad\001\002" +
    "\000\036\004\037\020\036\034\042\035\026\037\034\040" +
    "\044\041\033\044\031\051\040\052\136\053\020\055\027" +
    "\057\140\062\035\001\002\000\004\056\uffaf\001\002\000" +
    "\130\002\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\036\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\006" +
    "\052\022\053\020\001\002\000\004\061\uffdb\001\002\000" +
    "\042\017\065\020\073\021\072\022\076\023\071\024\100" +
    "\025\064\026\070\027\063\030\066\031\074\032\077\033" +
    "\067\047\062\050\102\054\166\001\002\000\126\002\uffc6" +
    "\004\051\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\027\056\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\050\001\002\000\120\002\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\036\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\120\002" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\036\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\001" +
    "\002\000\004\007\172\001\002\000\044\002\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\036\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\052\ufff5" +
    "\053\ufff5\064\ufff5\001\002\000\004\053\114\001\002\000" +
    "\010\053\uffe2\063\177\066\175\001\002\000\004\052\204" +
    "\001\002\000\006\053\uffe1\066\202\001\002\000\004\052" +
    "\200\001\002\000\010\053\uffde\063\177\066\uffde\001\002" +
    "\000\006\053\uffdd\066\uffdd\001\002\000\004\052\203\001" +
    "\002\000\004\053\uffe0\001\002\000\004\053\uffdf\001\002" +
    "\000\044\002\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\016\uffeb\036\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\052\uffeb\053\uffeb\064\uffeb\001\002\000" +
    "\004\002\001\001\002\000\034\004\037\020\036\034\042" +
    "\035\026\037\034\040\044\041\033\044\031\051\040\052" +
    "\022\053\020\055\027\062\035\001\002\000\044\002\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\036\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\052\ufff7\053\ufff7\064\ufff7\001\002\000\042\014\212\017" +
    "\065\020\073\021\072\022\076\023\071\024\100\025\064" +
    "\026\070\027\063\030\066\031\074\032\077\033\067\047" +
    "\062\050\102\001\002\000\024\006\017\010\005\011\004" +
    "\013\013\036\006\043\011\044\016\052\022\053\020\001" +
    "\002\000\010\007\217\015\214\016\215\001\002\000\034" +
    "\004\037\020\036\034\042\035\026\037\034\040\044\041" +
    "\033\044\031\051\040\052\022\053\020\055\027\062\035" +
    "\001\002\000\034\004\037\020\036\034\042\035\026\037" +
    "\034\040\044\041\033\044\031\051\040\052\022\053\020" +
    "\055\027\062\035\001\002\000\006\007\221\016\220\001" +
    "\002\000\044\002\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\015\ufff2\016\ufff2\036\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\052\ufff2\053\ufff2\064\ufff2\001\002" +
    "\000\034\004\037\020\036\034\042\035\026\037\034\040" +
    "\044\041\033\044\031\051\040\052\022\053\020\055\027" +
    "\062\035\001\002\000\044\002\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\036\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\052\ufff1\053\ufff1\064" +
    "\ufff1\001\002\000\042\007\223\017\065\020\073\021\072" +
    "\022\076\023\071\024\100\025\064\026\070\027\063\030" +
    "\066\031\074\032\077\033\067\047\062\050\102\001\002" +
    "\000\044\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\036\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\052\ufff0\053\ufff0\064\ufff0\001\002\000" +
    "\042\007\225\017\065\020\073\021\072\022\076\023\071" +
    "\024\100\025\064\026\070\027\063\030\066\031\074\032" +
    "\077\033\067\047\062\050\102\001\002\000\044\002\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015" +
    "\uffef\016\uffef\036\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\052\uffef\053\uffef\064\uffef\001\002\000\042\014\227\017" +
    "\065\020\073\021\072\022\076\023\071\024\100\025\064" +
    "\026\070\027\063\030\066\031\074\032\077\033\067\047" +
    "\062\050\102\001\002\000\024\006\017\010\005\011\004" +
    "\013\013\036\006\043\011\044\016\052\022\053\020\001" +
    "\002\000\010\007\uffe7\015\214\016\uffe7\001\002\000\006" +
    "\007\uffe6\016\uffe6\001\002\000\050\002\uffe5\004\037\007" +
    "\uffe5\012\uffe5\015\uffe5\016\uffe5\020\036\034\042\035\026" +
    "\037\034\040\044\041\033\044\031\051\040\052\022\053" +
    "\020\055\027\062\035\064\uffe5\001\002\000\014\002\uffff" +
    "\007\uffff\012\uffff\015\uffff\016\uffff\001\002\000\016\002" +
    "\uffe3\007\uffe3\012\uffe3\015\uffe3\016\uffe3\064\uffe3\001\002" +
    "\000\016\002\ufffa\007\ufffa\012\ufffa\015\ufffa\016\ufffa\064" +
    "\236\001\002\000\014\002\ufff9\007\ufff9\012\ufff9\015\ufff9" +
    "\016\ufff9\001\002\000\016\002\uffe4\007\uffe4\012\uffe4\015" +
    "\uffe4\016\uffe4\064\uffe4\001\002\000\070\002\uffe9\004\037" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\020\036\034\042\035\026\036\uffe9\037\034" +
    "\040\044\041\033\043\uffe9\044\uffe9\045\uffe9\046\uffe9\051" +
    "\040\052\uffe9\053\uffe9\055\027\062\035\064\uffe9\001\002" +
    "\000\004\052\242\001\002\000\004\053\114\001\002\000" +
    "\044\002\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\015\uffea\016\uffea\036\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\052\uffea\053\uffea\064\uffea\001\002\000\044" +
    "\002\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\016\uffe8\036\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\052\uffe8\053\uffe8\064\uffe8\001\002\000\042\002" +
    "\ufffd\006\017\007\ufffd\010\005\011\004\012\ufffd\013\013" +
    "\015\ufffd\016\ufffd\036\006\043\011\044\016\045\ufffd\046" +
    "\ufffd\052\022\053\020\001\002\000\020\002\ufffc\007\ufffc" +
    "\012\ufffc\015\ufffc\016\ufffc\045\ufffc\046\ufffc\001\002\000" +
    "\020\002\ufffb\007\ufffb\012\ufffb\015\ufffb\016\ufffb\045\ufffb" +
    "\046\ufffb\001\002\000\004\042\266\001\002\000\010\042" +
    "\uffd7\061\252\065\127\001\002\000\034\004\037\020\036" +
    "\034\042\035\026\037\034\040\044\041\033\044\031\051" +
    "\040\052\022\053\020\055\027\062\035\001\002\000\042" +
    "\017\065\020\073\021\072\022\076\023\071\024\100\025" +
    "\064\026\070\027\063\030\066\031\074\032\077\033\067" +
    "\047\062\050\102\065\254\001\002\000\034\004\037\020" +
    "\036\034\042\035\026\037\034\040\044\041\033\044\031" +
    "\051\040\052\022\053\020\055\027\062\035\001\002\000" +
    "\044\006\256\017\065\020\073\021\072\022\076\023\071" +
    "\024\100\025\064\026\070\027\063\030\066\031\074\032" +
    "\077\033\067\047\062\050\102\065\257\001\002\000\024" +
    "\006\017\010\005\011\004\013\013\036\006\043\011\044" +
    "\016\052\022\053\020\001\002\000\034\004\037\020\036" +
    "\034\042\035\026\037\034\040\044\041\033\044\031\051" +
    "\040\052\022\053\020\055\027\062\035\001\002\000\042" +
    "\006\261\017\065\020\073\021\072\022\076\023\071\024" +
    "\100\025\064\026\070\027\063\030\066\031\074\032\077" +
    "\033\067\047\062\050\102\001\002\000\024\006\017\010" +
    "\005\011\004\013\013\036\006\043\011\044\016\052\022" +
    "\053\020\001\002\000\004\007\263\001\002\000\044\002" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\036\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\052\uffed\053\uffed\064\uffed\001\002\000\004\007\265" +
    "\001\002\000\044\002\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\036\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\052\uffee\053\uffee\064\uffee\001" +
    "\002\000\034\004\037\020\036\034\042\035\026\037\034" +
    "\040\044\041\033\044\031\051\040\052\022\053\020\055" +
    "\027\062\035\001\002\000\004\006\270\001\002\000\024" +
    "\006\017\010\005\011\004\013\013\036\006\043\011\044" +
    "\016\052\022\053\020\001\002\000\004\007\272\001\002" +
    "\000\044\002\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\015\uffec\016\uffec\036\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\052\uffec\053\uffec\064\uffec\001\002\000" +
    "\042\006\274\017\065\020\073\021\072\022\076\023\071" +
    "\024\100\025\064\026\070\027\063\030\066\031\074\032" +
    "\077\033\067\047\062\050\102\001\002\000\024\006\017" +
    "\010\005\011\004\013\013\036\006\043\011\044\016\052" +
    "\022\053\020\001\002\000\004\007\276\001\002\000\044" +
    "\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\036\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\052\ufff4\053\ufff4\064\ufff4\001\002\000\004\012" +
    "\300\001\002\000\034\004\037\020\036\034\042\035\026" +
    "\037\034\040\044\041\033\044\031\051\040\052\022\053" +
    "\020\055\027\062\035\001\002\000\102\002\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016" +
    "\ufff3\017\065\020\073\021\072\022\076\023\071\024\100" +
    "\025\064\026\070\027\063\030\066\031\074\032\077\033" +
    "\067\036\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\062" +
    "\050\102\052\ufff3\053\ufff3\064\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\020\002\014\004\007\007\013\011\006\014" +
    "\011\025\020\027\022\001\001\000\022\002\124\004\007" +
    "\006\276\007\013\011\006\014\011\025\020\027\022\001" +
    "\001\000\020\011\040\012\272\022\042\025\046\026\027" +
    "\027\045\031\044\001\001\000\004\013\247\001\001\000" +
    "\002\001\001\000\016\004\007\007\013\011\006\014\245" +
    "\025\020\027\022\001\001\000\004\013\237\001\001\000" +
    "\006\005\234\015\232\001\001\000\020\011\040\012\210" +
    "\022\042\025\046\026\027\027\045\031\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\172\001\001" +
    "\000\022\002\124\004\007\006\170\007\013\011\006\014" +
    "\011\025\020\027\022\001\001\000\020\011\040\012\164" +
    "\022\042\025\046\026\027\027\045\031\044\001\001\000" +
    "\012\017\053\020\051\031\055\032\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\040\012\031\022\042\025\046\026\027\027\045\031\044" +
    "\001\001\000\002\001\001\000\024\011\040\012\136\022" +
    "\042\025\046\026\027\027\045\031\044\034\140\036\134" +
    "\001\001\000\002\001\001\000\004\024\114\001\001\000" +
    "\004\023\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\040\012\111\022\042\025\046\026\027\027\045\031" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\053\020\051\031\055\032\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\105\031\055\032\052\001\001\000\002\001" +
    "\001\000\022\010\057\011\040\012\060\022\042\025\046" +
    "\026\027\027\045\031\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\040\012\103\022\042" +
    "\025\046\026\027\027\045\031\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\102" +
    "\011\040\012\060\022\042\025\046\026\027\027\045\031" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\055\032\107\001\001\000\004\020\110\001\001" +
    "\000\002\001\001\000\004\023\074\001\001\000\002\001" +
    "\001\000\006\013\116\033\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\124\004" +
    "\007\006\130\007\013\011\006\014\011\025\020\027\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\124\004\007\006\123\007\013\011\006\014\011\025\020" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\152\016\151\001\001\000\002" +
    "\001\001\000\004\023\074\001\001\000\020\011\040\012" +
    "\143\022\042\025\046\026\027\027\045\031\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\074\001\001\000\002\001\001\000\020\011\040" +
    "\012\146\022\042\025\046\026\027\027\045\031\044\001" +
    "\001\000\004\023\074\001\001\000\020\011\040\012\150" +
    "\022\042\025\046\026\027\027\045\031\044\001\001\000" +
    "\004\023\074\001\001\000\004\003\160\001\001\000\022" +
    "\011\040\012\136\022\042\025\046\026\027\027\045\031" +
    "\044\036\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\157\016\156\001\001\000\002\001\001\000" +
    "\022\011\040\012\136\022\042\025\046\026\027\027\045" +
    "\031\044\036\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\163\011\040\025\020\027\022\001\001" +
    "\000\002\001\001\000\004\023\074\001\001\000\012\017" +
    "\167\020\166\031\055\032\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\204\001\001\000\004\030\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\207\011\040\012\060\022\042\025\046" +
    "\026\027\027\045\031\044\001\001\000\002\001\001\000" +
    "\004\023\074\001\001\000\022\002\124\004\007\006\212" +
    "\007\013\011\006\014\011\025\020\027\022\001\001\000" +
    "\004\035\215\001\001\000\020\011\040\012\225\022\042" +
    "\025\046\026\027\027\045\031\044\001\001\000\020\011" +
    "\040\012\223\022\042\025\046\026\027\027\045\031\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\040\012\221\022\042\025\046\026\027\027\045\031\044" +
    "\001\001\000\002\001\001\000\004\023\074\001\001\000" +
    "\002\001\001\000\004\023\074\001\001\000\002\001\001" +
    "\000\004\023\074\001\001\000\022\002\124\004\007\006" +
    "\227\007\013\011\006\014\011\025\020\027\022\001\001" +
    "\000\004\035\230\001\001\000\002\001\001\000\022\010" +
    "\236\011\040\012\060\022\042\025\046\026\027\027\045" +
    "\031\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\243\011\040\012\060\022\042\025\046\026\027\027" +
    "\045\031\044\001\001\000\002\001\001\000\004\024\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\007\007\013\011\006\014\246\025\020\027\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\040\012\252\022\042\025\046" +
    "\026\027\027\045\031\044\001\001\000\004\023\074\001" +
    "\001\000\020\011\040\012\254\022\042\025\046\026\027" +
    "\027\045\031\044\001\001\000\004\023\074\001\001\000" +
    "\022\002\124\004\007\006\263\007\013\011\006\014\011" +
    "\025\020\027\022\001\001\000\020\011\040\012\257\022" +
    "\042\025\046\026\027\027\045\031\044\001\001\000\004" +
    "\023\074\001\001\000\022\002\124\004\007\006\261\007" +
    "\013\011\006\014\011\025\020\027\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\266\011\040\012\060\022\042\025\046" +
    "\026\027\027\045\031\044\001\001\000\002\001\001\000" +
    "\022\002\124\004\007\006\270\007\013\011\006\014\011" +
    "\025\020\027\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\074\001\001\000\022\002\124\004\007" +
    "\006\274\007\013\011\006\014\011\025\020\027\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\040\012\300\022\042\025\046\026\027\027" +
    "\045\031\044\001\001\000\004\023\074\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
   private Symbol si;
   public String resultado= "Compilação concluida com sucesso, nenhum erro encontrado";
  
       
       


    public void syntax_error(Symbol s){
        this.si=s;
        this.resultado = "Erro de sintaxe. Linha: " + (si.right +1) +
        " Coluna: "  +   si.left +  ". Texto: \""  + si.value + "\"" ;

        report_error("Erro de sintaxe. Linha: " + (si.right +1) +
       " Coluna: "  +   si.left +  ". Texto: \""  + si.value + "\"" , null);

    }

  public void report_error(String message, Object info)  {
        resultado = resultado + "\n" + ("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
       resultado = resultado + "\n" + ("Error - " + message);
        //System.exit(-1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unop ::= NOT 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("unop" ," not "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unop ::= MEN 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("unop" ," - "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unop ::= TRALHA 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("unop" ," # "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // binop ::= OR 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // binop ::= AND 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // binop ::= APROXIGUAL 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"~="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // binop ::= IGUALIGUAL 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // binop ::= MAIORIGUAL 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binop ::= MAIOR 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binop ::= MENORIGUAL 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binop ::= MENOR 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binop ::= DPH 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,".."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= PERCENT 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= UNIAO 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= DIV 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= MULT 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= MEN 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= SUM 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("binop" ,"+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldsep ::= PV 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldsep" ,";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsep",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldsep ::= VI 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldsep" ,","); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsep",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // field ::= exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("field" , "exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // field ::= NAME IGUAL exp 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 new Auxiliares.Auxiliar("field" , na + " = exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // field ::= AC exp FC IGUAL exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("field" , "[ exp ] = exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // auxfieldlist ::= fieldsep field 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("auxfieldlist" , "fieldsep field"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxfieldlist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // auxfieldlist ::= fieldsep field auxfieldlist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("auxfieldlist" , "fieldsep field auxfieldlist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxfieldlist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // fieldlist ::= field fieldsep 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldlist" , "field fieldsep"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fieldlist ::= field auxfieldlist fieldsep 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldlist" , "field auxfieldlist fieldsep"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fieldlist ::= field auxfieldlist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldlist" , "field auxfieldlist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fieldlist ::= field 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("fieldlist" , "field"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tableconstructor ::= AX fieldlist FX 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("tableconstructor" , " { fieldlist } "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tableconstructor ::= AX FX 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("tableconstructor" , " {} "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parlist ::= TRESPT 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("parlist" , "..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parlist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parlist ::= namelist VI TRESPT 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("parlist" , "namelist  , ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parlist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parlist ::= namelist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("parlist" , "namelist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parlist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funcbody ::= AP parlist FP block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("funcbody" , "( parlist ) block END "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcbody",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcbody ::= AP FP block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("funcbody" , "( ) block END "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcbody",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // func ::= FUNCTION funcbody 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("func" , "FUNCTION funcbody"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // args ::= AP explist FP 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("args" , "( explist )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // args ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("args" , s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= tableconstructor 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("args" , "tableconstructor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= AP FP 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("args" , "( )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // functAux2 ::= DP NAME args functAux2 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 new Auxiliares.Auxiliar("functAux2" , " : " + na + " args functAux2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functAux2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // functAux2 ::= DP NAME args 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar("functAux2" , " : " + na + " args"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functAux2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // functAux1 ::= args functAux1 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functAux1" , "args functAux1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functAux1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // functAux1 ::= args 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functAux1" , "args"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functAux1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // functioncall ::= AP exp FP functAux2 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functioncall" , "( exp ) functAux2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // functioncall ::= var functAux2 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functioncall" , "var  functAux2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // functioncall ::= AP exp FP functAux1 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functioncall" , "( exp ) functAux1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functioncall ::= var functAux1 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("functioncall" , "var  functAux1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // prefixexp ::= AP exp FP 
            {
              String RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("prefixexp" , ap + " exp " + fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // prefixexp ::= functioncall 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("prefixexp" ,"functioncall"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // prefixexp ::= var 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("prefixexp" ,"var"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp binop exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("exp" ,"exp binop exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= unop exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("exp" ,"unop exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= tableconstructor 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("exp" ,"tableconstructor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= prefixexp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("exp" ,"prefixexp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= func 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("exp" ,"func"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= TRESPT 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" ,tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" ,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= NUMBER 
            {
              String RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" ,nu); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= TRUE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" ,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= FALSE 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" , f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= NIL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("exp" ,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // explist ::= exp VI explist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("explist" ," , explist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // explist ::= exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("explist" ,"exp"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // namelist ::= NAME VI namelist 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 new Auxiliares.Auxiliar("namelist" ,na + " , namelist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // namelist ::= NAME 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("namelist" ,na); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= prefixexp UMPT NAME 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("var" , "prefixexp . " + na); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= prefixexp AC exp FC 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("var" , "prefixexp [ exp ] "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= NAME 
            {
              String RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("var" , t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varlist ::= var VI varlist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("varlist" , "var , varlist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varlist ::= var 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("varlist" , "var"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // auxfuncname ::= UMPT NAME auxfuncname 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar("auxfuncname" , " . " + na + " auxfuncname "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxfuncname",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // auxfuncname ::= UMPT NAME 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("auxfuncname" , " . " + na); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxfuncname",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcname ::= NAME DP NAME 
            {
              String RESULT =null;
		int na1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int na1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String na1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int na2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int na2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("funcname" , na1 + " : " + na2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcname ::= NAME auxfuncname DP NAME 
            {
              String RESULT =null;
		int na1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int na1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String na1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int na2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int na2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("funcname" , na1 + " auxfuncname : " + na2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcname ::= NAME auxfuncname 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar("funcname" , na + " auxfuncname"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcname ::= NAME 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("funcname" , na); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // laststat ::= BREAK 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("laststat" , "BREAK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // laststat ::= RETURN explist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("laststat" , "RETURN explist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // laststat ::= RETURN 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("laststat" , "RETURN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("laststat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // auxelseif ::= ELSEIF exp THEN block auxelseif 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("auxelseif" , "ELSEIF exp THEN block auxelseif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxelseif",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // auxelseif ::= ELSEIF exp THEN block 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("auxelseif" , "ELSEIF exp THEN block"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxelseif",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stat ::= LOCAL namelist explist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "LOCAL namelist explist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stat ::= LOCAL namelist 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "LOCAL namelist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar("stat" , "LOCAL FUNCTION " + na + "funcbody"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stat ::= FUNCTION funcname funcbody 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "FUNCTION funcname funcbody"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= FOR namelist IN explist DO block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "FOR namelist IN explist DO block END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= FOR NAME IGUAL exp VI exp VI exp DO block END 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		 new Auxiliares.Auxiliar("stat" , "FOR " + na + " = exp , exp , exp DO block END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= FOR NAME IGUAL exp VI exp DO block END 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 new Auxiliares.Auxiliar("stat" , "FOR " + na + " = exp , exp DO block END "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= IF exp THEN block ELSE exp END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "IF exp THEN block ELSE exp END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= IF exp THEN block auxelseif ELSE exp END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "IF exp THEN block auxelseif ELSE exp END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= IF exp THEN block auxelseif END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "IF exp THEN block auxelseif END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= IF exp THEN block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "IF exp THEN block END "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= REPEAT block UNTIL exp 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "REPEAT block UNTIL exp "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= WHILE exp DO block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "WHILE exp DO block END "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= DO block END 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "DO block END" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= functioncall 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("stat" , "functioncall"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= varlist IGUAL explist 
            {
              String RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar("stat" , "varlist " +ig + " explist"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= chunk 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("block" , "chunk" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // auxlaststat ::= laststat PV 
            {
              String RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("auxlaststat" , "lastatstat " + pv.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxlaststat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // auxlaststat ::= laststat 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar( "auxlaststat" , "lastStat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxlaststat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // auxstat ::= stat PV auxstat 
            {
              String RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 new Auxiliares.Auxiliar( "auxstat" , "stat " + pv.toString() + "auxstat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxstat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // auxstat ::= stat auxstat 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar( "auxstat" , "stat auxstat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxstat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // auxstat ::= stat PV 
            {
              String RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new Auxiliares.Auxiliar("auxstat" , "auxstat " + pv.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxstat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // auxstat ::= stat 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("auxstat" ,"stat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxstat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= auxstat auxlaststat 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("chunk" , "auxstat auxlaststat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunk ::= auxstat 
            {
              String RESULT =null;
		 new Auxiliares.Auxiliar("chunk" ,"auxstat"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

