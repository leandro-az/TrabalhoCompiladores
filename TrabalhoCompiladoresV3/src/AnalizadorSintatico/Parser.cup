package AnalizadorSintatico;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import AnalizadorLexico.ScannerJLexer.*;

/* java -cp java-cup-11a.jar java_cup.Main Parser.cup */


parser code {:
   
   private Symbol si;
   public String resultado= "Compilação concluida com sucesso, nenhum erro encontrado";
  
       
       


    public void syntax_error(Symbol s){
        this.si=s;
        this.resultado = "Erro de sintaxe. Linha: " + (si.right +1) +
        " Coluna: "  +   si.left +  ". Texto: \""  + si.value + "\"" ;

        report_error("Erro de sintaxe. Linha: " + (si.right +1) +
       " Coluna: "  +   si.left +  ". Texto: \""  + si.value + "\"" , null);

    }

  public void report_error(String message, Object info)  {
        resultado = resultado + "\n" + ("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
       resultado = resultado + "\n" + ("Error - " + message);
        //System.exit(-1);
    }

:}
    


/* terminals (tokens returned by the scanner). */

terminal String STRING, ERRO, DO, END, WHILE, REPEAT, UNTIL, IF, THEN, ELSEIF, ELSE, SUM, MEN, MULT, DIV, PERCENT, DPH, UNIAO;
terminal String MENOR, MENORIGUAL, MAIOR, MAIORIGUAL, IGUALIGUAL, APROXIGUAL, TRALHA, NOT;
terminal String FOR, NIL, FALSE, TRUE, IN, LOCAL, FUNCTION, RETURN, BREAK, AND, OR, NUMBER, NAME, AP, FP, AX, FX;
terminal String AC, FC, IGUAL, TRESPT, UMPT, PV, VI, DP; 

/* não terminais */
non terminal String chunk, fieldsep, stat, laststat, block, varlist, explist, functioncall, exp, namelist, auxstat, auxlaststat, auxfieldlist, functAux1, functAux2;
non terminal String funcname, unop, binop, funcbody, var, func, prefixexp, auxfuncname, tableconstructor, args, parlist, fieldlist, auxelseif, field ;

precedence left UNIAO;
precedence left NOT, TRALHA;
precedence left MULT, DIV, PERCENT;
precedence left SUM, MEN;
precedence left DPH;
precedence left MENOR, MAIOR, MENORIGUAL, MAIORIGUAL, APROXIGUAL, IGUALIGUAL;
precedence left AND;
precedence left OR, RETURN;
precedence left IF, ELSEIF ,ELSE;
precedence left AP, FP, PV , VI, LOCAL;



/* the grammar rules */

start with chunk ;

chunk ::=  auxstat {: new Auxiliares.Auxiliar("chunk" ,"auxstat"); :}  
| auxstat auxlaststat {: new Auxiliares.Auxiliar("chunk" , "auxstat auxlaststat"); :}  ;


auxstat ::= stat {: new Auxiliares.Auxiliar("auxstat" ,"stat"); :}  
| stat PV:pv {: new Auxiliares.Auxiliar("auxstat" , "auxstat " + pv.toString()); :} 
| stat auxstat {: new Auxiliares.Auxiliar( "auxstat" , "stat auxstat"); :} 
| stat PV:pv auxstat {: new Auxiliares.Auxiliar( "auxstat" , "stat " + pv.toString() + "auxstat"); :}  ;

auxlaststat ::= laststat {: new Auxiliares.Auxiliar( "auxlaststat" , "lastStat"); :} 
| laststat PV:pv {: new Auxiliares.Auxiliar("auxlaststat" , "lastatstat " + pv.toString()); :};

block ::= chunk {: new Auxiliares.Auxiliar("block" , "chunk" ); :}  ;

stat ::= varlist IGUAL:ig explist {: new Auxiliares.Auxiliar("stat" , "varlist " +ig + " explist"); :}
| functioncall {: new Auxiliares.Auxiliar("stat" , "functioncall"); :}
| DO block END {: new Auxiliares.Auxiliar("stat" , "DO block END" ); :}
| WHILE exp DO block END {: new Auxiliares.Auxiliar("stat" , "WHILE exp DO block END "); :}
| REPEAT block UNTIL exp  {: new Auxiliares.Auxiliar("stat" , "REPEAT block UNTIL exp "); :}
| IF exp THEN block END   {: new Auxiliares.Auxiliar("stat" , "IF exp THEN block END "); :}
| IF exp THEN block auxelseif END {: new Auxiliares.Auxiliar("stat" , "IF exp THEN block auxelseif END"); :}
| IF exp THEN block auxelseif ELSE exp END {: new Auxiliares.Auxiliar("stat" , "IF exp THEN block auxelseif ELSE exp END"); :}
| IF exp THEN block ELSE exp END  {: new Auxiliares.Auxiliar("stat" , "IF exp THEN block ELSE exp END"); :}
| FOR NAME:na IGUAL exp VI exp DO block END {: new Auxiliares.Auxiliar("stat" , "FOR " + na + " = exp , exp DO block END "); :}
| FOR NAME:na IGUAL exp VI exp VI exp DO block END {: new Auxiliares.Auxiliar("stat" , "FOR " + na + " = exp , exp , exp DO block END"); :}
| FOR namelist IN explist DO block END {: new Auxiliares.Auxiliar("stat" , "FOR namelist IN explist DO block END"); :}
| FUNCTION funcname funcbody  {: new Auxiliares.Auxiliar("stat" , "FUNCTION funcname funcbody"); :}
| LOCAL FUNCTION NAME:na funcbody {: new Auxiliares.Auxiliar("stat" , "LOCAL FUNCTION " + na + "funcbody"); :}
| LOCAL namelist {: new Auxiliares.Auxiliar("stat" , "LOCAL namelist"); :}
| LOCAL namelist explist {: new Auxiliares.Auxiliar("stat" , "LOCAL namelist explist"); :} ;

auxelseif ::= ELSEIF exp THEN block {: new Auxiliares.Auxiliar("auxelseif" , "ELSEIF exp THEN block"); :} 
| ELSEIF exp THEN block auxelseif {: new Auxiliares.Auxiliar("auxelseif" , "ELSEIF exp THEN block auxelseif"); :} ;


laststat ::= RETURN {: new Auxiliares.Auxiliar("laststat" , "RETURN"); :}
| RETURN explist {: new Auxiliares.Auxiliar("laststat" , "RETURN explist"); :}
| BREAK {: new Auxiliares.Auxiliar("laststat" , "BREAK"); :} ;

funcname ::= NAME:na {: new Auxiliares.Auxiliar("funcname" , na); :}
| NAME:na auxfuncname {: new Auxiliares.Auxiliar("funcname" , na + " auxfuncname"); :}
| NAME:na1 auxfuncname DP NAME:na2 {: new Auxiliares.Auxiliar("funcname" , na1 + " auxfuncname : " + na2); :}
| NAME:na1 DP NAME:na2 {: new Auxiliares.Auxiliar("funcname" , na1 + " : " + na2); :};

auxfuncname ::= UMPT NAME:na {: new Auxiliares.Auxiliar("auxfuncname" , " . " + na); :}
| UMPT NAME:na auxfuncname {: new Auxiliares.Auxiliar("auxfuncname" , " . " + na + " auxfuncname "); :} ;

varlist ::= var {: new Auxiliares.Auxiliar("varlist" , "var"); :}
| var VI varlist {: new Auxiliares.Auxiliar("varlist" , "var , varlist"); :} ;

var ::= NAME:t2 {: new Auxiliares.Auxiliar("var" , t2); :}  
| prefixexp AC exp FC {: new Auxiliares.Auxiliar("var" , "prefixexp [ exp ] "); :}
| prefixexp UMPT NAME:na {: new Auxiliares.Auxiliar("var" , "prefixexp . " + na); :} ;

namelist ::= NAME:na  {: new Auxiliares.Auxiliar("namelist" ,na); :} 
| NAME:na VI namelist {: new Auxiliares.Auxiliar("namelist" ,na + " , namelist"); :} ;

explist ::= exp {: new Auxiliares.Auxiliar("explist" ,"exp"); :} 
| exp VI  explist  {: new Auxiliares.Auxiliar("explist" ," , explist"); :} ;

exp ::= NIL:n {: new Auxiliares.Auxiliar("exp" ,n); :} 
| FALSE:f {: new Auxiliares.Auxiliar("exp" , f); :} 
| TRUE:t {: new Auxiliares.Auxiliar("exp" ,t); :} 
| NUMBER:nu {: new Auxiliares.Auxiliar("exp" ,nu); :} 
| STRING:s {: new Auxiliares.Auxiliar("exp" ,s); :} 
| TRESPT:tp {: new Auxiliares.Auxiliar("exp" ,tp); :} 
| func {: new Auxiliares.Auxiliar("exp" ,"func"); :} 
| prefixexp {: new Auxiliares.Auxiliar("exp" ,"prefixexp"); :} 
| tableconstructor  {: new Auxiliares.Auxiliar("exp" ,"tableconstructor"); :} 
| unop exp {: new Auxiliares.Auxiliar("exp" ,"unop exp"); :}
| exp binop exp {: new Auxiliares.Auxiliar("exp" ,"exp binop exp"); :};


prefixexp ::= var {: new Auxiliares.Auxiliar("prefixexp" ,"var"); :} 
| functioncall {: new Auxiliares.Auxiliar("prefixexp" ,"functioncall"); :}
| AP:ap exp FP:fp {: new Auxiliares.Auxiliar("prefixexp" , ap + " exp " + fp); :} ;

functioncall ::= var  functAux1 {: new Auxiliares.Auxiliar("functioncall" , "var  functAux1"); :} 
| AP exp FP functAux1 {: new Auxiliares.Auxiliar("functioncall" , "( exp ) functAux1"); :} 
| var  functAux2  {: new Auxiliares.Auxiliar("functioncall" , "var  functAux2"); :} 
| AP exp FP functAux2 {: new Auxiliares.Auxiliar("functioncall" , "( exp ) functAux2"); :} ;

functAux1 ::= args {: new Auxiliares.Auxiliar("functAux1" , "args"); :}
| args functAux1 {: new Auxiliares.Auxiliar("functAux1" , "args functAux1"); :} ;

functAux2 ::= DP NAME:na args {: new Auxiliares.Auxiliar("functAux2" , " : " + na + " args"); :}
| DP NAME:na args functAux2 {: new Auxiliares.Auxiliar("functAux2" , " : " + na + " args functAux2"); :};

args ::= AP FP {: new Auxiliares.Auxiliar("args" , "( )"); :}
| tableconstructor {: new Auxiliares.Auxiliar("args" , "tableconstructor"); :}
| STRING:s {: new Auxiliares.Auxiliar("args" , s); :}
| AP explist FP {: new Auxiliares.Auxiliar("args" , "( explist )"); :} ; 

func ::= FUNCTION funcbody {: new Auxiliares.Auxiliar("func" , "FUNCTION funcbody"); :} ;

funcbody ::= AP FP block END {: new Auxiliares.Auxiliar("funcbody" , "( ) block END "); :}
| AP parlist FP block END {: new Auxiliares.Auxiliar("funcbody" , "( parlist ) block END "); :};

parlist ::= namelist {: new Auxiliares.Auxiliar("parlist" , "namelist"); :}
| namelist  VI TRESPT {: new Auxiliares.Auxiliar("parlist" , "namelist  , ... "); :}
| TRESPT {: new Auxiliares.Auxiliar("parlist" , "..."); :};

tableconstructor ::= AX FX {: new Auxiliares.Auxiliar("tableconstructor" , " {} "); :}
| AX fieldlist FX {: new Auxiliares.Auxiliar("tableconstructor" , " { fieldlist } "); :};

fieldlist ::= field {: new Auxiliares.Auxiliar("fieldlist" , "field"); :}
| field auxfieldlist {: new Auxiliares.Auxiliar("fieldlist" , "field auxfieldlist"); :}
| field auxfieldlist fieldsep {: new Auxiliares.Auxiliar("fieldlist" , "field auxfieldlist fieldsep"); :}
| field fieldsep {: new Auxiliares.Auxiliar("fieldlist" , "field fieldsep"); :} ;

auxfieldlist ::= fieldsep field auxfieldlist {: new Auxiliares.Auxiliar("auxfieldlist" , "fieldsep field auxfieldlist"); :}
| fieldsep field {: new Auxiliares.Auxiliar("auxfieldlist" , "fieldsep field"); :} ; 

field ::= AC exp FC IGUAL exp {: new Auxiliares.Auxiliar("field" , "[ exp ] = exp"); :} 
| NAME:na IGUAL exp {: new Auxiliares.Auxiliar("field" , na + " = exp"); :} 
| exp {: new Auxiliares.Auxiliar("field" , "exp"); :}  ;

fieldsep ::= VI {: new Auxiliares.Auxiliar("fieldsep" ,","); :} 
| PV {: new Auxiliares.Auxiliar("fieldsep" ,";"); :} ;

binop ::= SUM {: new Auxiliares.Auxiliar("binop" ,"+"); :} 
| MEN {: new Auxiliares.Auxiliar("binop" ,"-"); :} 
| MULT {: new Auxiliares.Auxiliar("binop" ,"*"); :} 
| DIV {: new Auxiliares.Auxiliar("binop" ,"/"); :} 
| UNIAO {: new Auxiliares.Auxiliar("binop" ,"^"); :} 
| PERCENT {: new Auxiliares.Auxiliar("binop" ,"%"); :} 
| DPH {: new Auxiliares.Auxiliar("binop" ,".."); :} 
| MENOR {: new Auxiliares.Auxiliar("binop" ,"<"); :} 
| MENORIGUAL {: new Auxiliares.Auxiliar("binop" ,"<="); :} 
| MAIOR {: new Auxiliares.Auxiliar("binop" ,">"); :} 
| MAIORIGUAL {: new Auxiliares.Auxiliar("binop" ,">="); :} 
| IGUALIGUAL {: new Auxiliares.Auxiliar("binop" ,"=="); :} 
| APROXIGUAL {: new Auxiliares.Auxiliar("binop" ,"~="); :} 
| AND {: new Auxiliares.Auxiliar("binop" ,"and"); :} 
| OR {: new Auxiliares.Auxiliar("binop" ,"or"); :}  ;

unop ::= TRALHA {: new Auxiliares.Auxiliar("unop" ," # "); :}
| MEN {: new Auxiliares.Auxiliar("unop" ," - "); :}
| NOT {: new Auxiliares.Auxiliar("unop" ," not "); :} ;

